### 版本管理 - 当前版本
GET {{baseUrl}}/version/v

### 类加载器 - 所有的类加载器
GET {{baseUrl}}/classloader/classloaders

### 类加载器 - 查看类加载器加载的类
GET {{baseUrl}}/classloader/listLoadedClasses?classloaderName=park

### 类加载器 - 查看某个类的所有字段信息
GET {{baseUrl}}/classloader/messagecenterdao/com.eg.egsc.scp.messagecenter.dto.PushChannelParam/fields

### 类加载器 - 查看某个类的所有方法信息
GET {{baseUrl}}/classloader/messagecenterdao/com.eg.egsc.scp.messagecenter.dto.PushChannelParam/methods

### 类加载器 - 上传 zip 包, 需要类有严格的目录结构
POST {{baseUrl}}/classloader/uploadClassesZip
Content-Type: multipart/form-data; boundary=uploadClassesZip

--uploadClassesZip
Content-Disposition: form-data; name="file"; filename="messagecenterdao.zip"
Content-Type: application/octet-stream

< d:/test/messagecenterdao.zip
--uploadClassesZip
Content-Disposition: form-data; name="classloaderName"
Content-Type: application/x-www-form-urlencoded

messagecenterdao

### 类加载器 - 上传 zip 包, 不需要严格的目录结构
POST {{baseUrl}}/classloader/uploadClassesZipSimple
Content-Type: multipart/form-data; boundary=uploadClassesZip

--uploadClassesZip
Content-Disposition: form-data; name="file"; filename="entity.zip"
Content-Type: application/octet-stream

< d:/test/entity.zip
--uploadClassesZip
Content-Disposition: form-data; name="classloaderName"
Content-Type: application/x-www-form-urlencoded

entity
### 类加载器 - 上传单个 class 文件
POST {{baseUrl}}/classloader/uploadSingleClass
Content-Type: multipart/form-data; boundary=uploadSingleClass

--uploadSingleClass
Content-Disposition: form-data; name="file"; filename="ParkingLotBean.class"
Content-Type: application/octet-stream

< d:/test/ParkingLotBean.class
--uploadSingleClass
Content-Disposition: form-data; name="classloaderName"
Content-Type: application/x-www-form-urlencoded

park
### 数据 - 类加载器随机数据生成
GET {{baseUrl}}/data/random?className=com.sanri.tools.modules.core.dtos.param.DatabaseConnectParam&classloaderName=

### 数据 - 类加载器随机数据生成 List
GET {{baseUrl}}/data/random/list?className=com.sanri.tools.modules.core.dtos.param.DatabaseConnectParam&classloaderName=

### 数据 - 正则表达式生成数据
GET {{baseUrl}}/data/random/regex?regex=\d{10}[a-z]{2}\s\w{5}

### 数据 - 爬虫数据
POST {{baseUrl}}/data/spider
Content-Type: application/json

{
  "className": "com.sanri.app.jsoup.biquge1.NovelSearch",
  "classloaderName": "jsoup",
  "params": {
  "keyword": "校花的贴身高手"
  }
}
### 序列化 - 可用的序列化列表
GET {{baseUrl}}/serializer/names

### 插件 - 获取所有插件名称
GET {{baseUrl}}/plugin/names

### 插件 - 插件列表,经过排序的
GET {{baseUrl}}/plugin/list

### 插件 - 获取插件详情
GET {{baseUrl}}/plugin/detail?key=kafka:main

### 插件 - 访问插件
GET {{baseUrl}}/plugin/visited?key=kafka:main

### 插件 - 序列化数据到文件
GET {{baseUrl}}/plugin/serializer

### 连接管理-获取所有模块
GET {{baseUrl}}/connect/modules

### 连接管理-获取某个模块的连接列表
GET {{baseUrl}}/connect/redis/names

### 连接管理-获取某个连接详情
GET {{baseUrl}}/connect/redis/10.101.72.43

### 连接管理-获取所有连接
GET {{baseUrl}}/connect/all

### 创建数据库连接
POST {{baseUrl}}/connect/create/database
Content-Type: application/json

{
  "connectIdParam": {
    "module": "database",
    "connName": "localhost"
  },
  "connectParam": {
    "host": "localhost",
    "port": 3306
  },
  "authParam": {
    "username": "root",
    "password": "h123"
  },
  "dbType": "mysql",
  "database": "test"
}

### 获取所有数据库连接
GET {{baseUrl}}/db/metadata/connections

### 获取所有 catalogs
GET {{baseUrl}}/db/metadata/catalogs?connName=localhost

### 获取 catalog 的所有表
GET {{baseUrl}}/db/metadata/tables?connName=localhost&catalog=test

### 刷新所有的表 (没测试)
GET {{baseUrl}}/db/metadata/refreshTables?connName=localhost&catalog=test&schema=

### 刷新表的列
GET {{baseUrl}}/db/metadata/refreshColumns?connName=localhost&catalog=test&tableName=batch

### 刷新表的主键
GET {{baseUrl}}/db/metadata/refreshPrimaryKeys?connName=localhost&catalog=test&tableName=batch

### 刷新表的索引
GET {{baseUrl}}/db/metadata/refreshIndexs?connName=localhost&catalog=test&tableName=batch

### 标记表-常用标记
GET {{baseUrl}}/db/metadata/extend/mark/tags

### 标记表-标记表
POST {{baseUrl}}/db/metadata/extend/mark/config/tableMark
Content-Type: application/json

[
  {
    "connName": "lo",
    "schemaName": "hdsc_db",
    "tableName": "mct_event_handler",
    "tags": ["biz"]
  }
]

### 标记表-获取表标记
GET {{baseUrl}}/db/metadata/extend/mark/tableTags?connName=lo&schemaName=hdsc_db&tableName=mct_event_handler

### 标记表-查找某个标记的表
GET {{baseUrl}}/db/metadata/extend/mark/tagTables?connName=lo&schemaName=hdsc_db

### 表关系 - 配置表关系
POST {{baseUrl}}/db/metadata/extend/relation/config
Content-Type: application/json

{
  "connName": "lo",
  "schemaName": "hdsc_db",
  "tableRelations": [
    {
      "sourceTableName": "mct.mct_event_handler",
      "targetTableName": "mct.mct_event_record_common",
      "sourceColumnName": "uuid",
      "targetColumnName": "uuid",
      "relation": "ONE_ONE"
    }
  ]
}

### 单表随机数据生成
POST {{baseUrl}}/db/data/singleTableRandomData
Content-Type: application/json

{
  "connName": "localhost",
  "schemaName": "test",
  "tableName": "test",
  "columnMappers":[{"columnName": "name","random": "T(com.sanri.tools.modules.core.utils.RandomUtil).chinese(64,null)"},
    {"columnName": "idcard","random": "T(com.sanri.tools.modules.core.utils.RandomUtil).idcard()"}]
}

### 数据表 - 配置数据(nacos,diamond) - 所有分组信息
GET {{baseUrl}}/db/data/config/groups?connName=lo&schemaName=nacos

### 数据表 - 配置数据 - 分组的 dataIds
GET {{baseUrl}}/db/data/config/dataIds?connName=lo&schemaName=nacos&groupId=scp-st-messagecenter-component

### 数据表 - 配置数据 - 获取配置数据详情
GET {{baseUrl}}/db/data/config/content?connName=lo&schemaName=nacos&groupId=scp-st-messagecenter-component&dataId=scp-st-messagecenter-component-dev.properties

### 数据表 - 数据 - 导出数据预览
POST {{baseUrl}}/db/data/exportPreview
Content-Type: application/json

{
  "connName": "lo",
  "sql": "select * from mct.mct_event_record_common"
}

### 数据表 - 数据 - 导出数据 (单线程)
POST {{baseUrl}}/db/data/exportData
Content-Type: application/json

{
  "connName": "lo",
  "sql": "select * from mct.mct_event_record_common",
  "traceId": "abc"
}
### 数据库 - 代码生成 - 列出所有重命名策略
GET {{baseUrl}}/db/code/renameStrategies

### 数据表 - 代码生成 - 生成 javaBean
POST {{baseUrl}}/db/code/javaBeanBuild
Content-Type: application/json

{
  "connName": "lo",
  "catalog": null,
  "schema": "mct",
  "tableNames": [
    "mct_event_record_common","mct_event_record","mct_event_handler"
  ],
  "lombok": true,
  "swagger2": false,
  "persistence": false,
  "serializer": false,
  "packageName": "com.sanri.entity",
  "renameStrategy": "defaultRenameStragtegy"
}

### 数据库 - 代码生成 - 列出所有模板
GET {{baseUrl}}/db/code/templates

### 数据库 - 代码生成 - 查询某个模板详情
GET {{baseUrl}}/db/code/mapper.xml.32322.ftl/content

### 数据库 - 代码生成 - 建立一个方案
POST {{baseUrl}}/db/code/override
Content-Type: application/json

{
  "name": "base.schema",
  "content": "mapper.xml.32322.ftl"
}

### 数据库 - 代码生成 - 列出所有方案
GET {{baseUrl}}/db/code/schemas

### 数据库 - 代码生成 - 列出某个方案的模板列表
GET {{baseUrl}}/db/code/base.schema/templates

### 数据库 - 代码生成 - 预览模板代码
POST {{baseUrl}}/db/code/template/code/preview
Content-Type: application/json

{
  "template": "mapper.xml.32322.ftl",
  "connName": "localhost",
  "renameStrategyName": "defaultRenameStragtegy",
  "actualTableName": {
    "catalog": "test",
    "tableName": "batch"
  },
  "packageConfig": {
  "mapper": "com.sanri.test.mapper"
  }
}

### 数据库 - 代码生成  - 生成代码
POST {{baseUrl}}/db/code/template/code/generator
Content-Type: application/json

{
  "renameStrategyName": "defaultRenameStragtegy",
  "templates": [
    "mapper.xml.32322.ftl"
  ],
  "dataSourceConfig": {
    "connName": "localhost",
    "catalog": "test",
    "tableNames": ["batch"]
  },
  "packageConfig": {
    "mapper": "com.sanri.test.mapper"
  }
}
### 创建 zookeeper 连接
POST {{baseUrl}}/connect/create/zookeeper
Content-Type: application/json

{
  "connectIdParam": {
    "module": "zookeeper",
    "connName": "192.168.2.134_2181"
  },
  "connectParam": {
    "host": "192.168.2.134",
    "port": 2181
  }
}

### 列出子节点
GET {{baseUrl}}/zookeeper/childrens?connName=192.168.72.42_2181&path=/hd/kafka

### 元数据 meta
GET {{baseUrl}}/zookeeper/meta?connName=192.168.72.43&path=/brokers

### acls 权限
GET {{baseUrl}}/zookeeper/acls?connName=192.168.72.43&path=/brokers

### 读取数据
GET {{baseUrl}}/zookeeper/readData?connName=192.168.72.43&path=/brokers/ids/1&serializer=string

### 创建 redis 连接
POST {{baseUrl}}/connect/create/redis
Content-Type: application/json

{
  "connectIdParam": {
    "module": "redis",
    "connName": "10.101.72.43"
  },
  "connectParam": {
    "host": "10.101.72.43",
    "port": 7000
  }
}

### redis - 查看 redis 的节点列表
GET {{baseUrl}}/redis/nodes?connName=10.101.72.43

### redis - scan 某个 key ,可以模糊查询
GET {{baseUrl}}/redis/scan?connName=10.101.72.43&pattern=PLC:PARKINGLOT.CACHE&limit=10

### redis - 读取某个具体的 key; 这个数据有点复杂,本来是用 GET 请求的,换 POST
POST {{baseUrl}}/redis/data
Content-Type: application/json

{
  "connName": "10.101.72.43",
  "key": "PLC:PARKINGLOT.CACHE",
  "serializerChose": {
    "value": "jdk",
    "hashKey": "jdk",
    "hashValue": "jdk"
  },
  "classloaderName": "singleClasses",
  "extraQueryParam": {
    "hashKey": "22"
  }
}

### redis -  扫描 hashKey
GET {{baseUrl}}/redis/hashKeyScan?connName=10.101.72.43&key=PLC:PARKINGLOT.CACHE&pattern=&limit=100&hashKeySerizlizer=jdk

### redis -  key 长度
GET {{baseUrl}}/redis/keyLength?connName=10.101.72.43&key=PLC:PARKINGLOT.CACHE

### google 翻译
GET http://translate.google.cn/translate_a/single?client=gtx&sl=zh-CN&tl=en&dt=t&q=查询当前组织下的审核人

### 翻译取名工具
GET {{baseUrl}}/name/translate?orginChars=查询当前组织下的审核人&tokenizer=ik&tranlates=baidu

### 所有的英语翻译
GET {{baseUrl}}/name/englishs

### 所有的分词器
GET {{baseUrl}}/name/tokenizers

### 所有的业务词
GET {{baseUrl}}/name/bizs

### 业务词详情
GET {{baseUrl}}/name/detail/common

### 写入业务词
POST {{baseUrl}}/name/mirror/write/common
Content-Type: application/x-www-form-urlencoded

用户=user
人=people
### 多列翻译
GET {{baseUrl}}/name/multiTranslate?words=审核人&words=消息中心&words=查询当前组织下的审核人&english=baidu

### 多列翻译下划线方式
GET {{baseUrl}}/name/mutiTranslateUnderline?words=审核人&words=消息中心&words=查询当前组织下的审核人&english=baidu

### 创建 kafka 连接
POST {{baseUrl}}/kafka/connect/create
Content-Type: application/yaml

connectIdParam:
  module: kafka
  connName: 192.168.72.42_2181
chroot: /hd/kafka
kafka:
  properties:
    sasl:
      jaas:
        config: org.apache.kafka.common.security.plain.PlainLoginModule required username=hd password=hd-kafka;
      mechanism: PLAIN
    security:
      protocol: SASL_PLAINTEXT

### 列出所有的主题信息
GET {{baseUrl}}/kafka/topics?clusterName=192.168.72.42_2181

### 列出主题日志数量
GET {{baseUrl}}/kafka/topic/logSize?clusterName=192.168.72.42_2181&topic=EGSC_SCP_DEVICEMGMT_STATUSTOBROADCAST_TOPIC

### 列出所有的消费组
GET {{baseUrl}}/kafka/groups?clusterName=192.168.72.42_2181

### 列出消费组消费的主题
GET {{baseUrl}}/kafka/group/topics?clusterName=192.168.72.42_2181&group=scp-st-broadcastApp_BC_APP6876

### 消费组情况查询
GET {{baseUrl}}/kafka/group/subscribes?clusterName=192.168.72.42_2181&group=scp-st-broadcastApp_BC_APP6876

### 消费组消费主题的偏移量 offset,logsize,lag
GET {{baseUrl}}/kafka/group/topic/offset?clusterName=192.168.72.42_2181&group=scp-st-broadcastApp_BC_APP6876&topic=EGSC_SCP_DEVICEMGMT_STATUSTOBROADCAST_TOPIC

### 消费组所有主题的偏移量
GET {{baseUrl}}/kafka/group/topics/offset?clusterName=192.168.72.42_2181&group=scp-st-broadcastApp_BC_APP6876

### brokers
GET {{baseUrl}}/kafka/brokers?clusterName=192.168.72.42_2181

### 消费主题最后几条数据
GET {{baseUrl}}/kafka/topic/data/last?clusterName=192.168.72.42_2181&topic=EGSC_SCP_SDC_EVENT_DATA_TOPIC&partition=-1&perPartitionSize=10&serializer=string

### 消费主题附近的几条数据
GET {{baseUrl}}/kafka/group/topic/data/nearby?clusterName=192.168.72.42_2181&topic=EGSC_SCP_SDC_EVENT_DATA_TOPIC&partition=0&offset=16090&perPartitionSize=10&serializer=string

### 发送 json 数据
POST {{baseUrl}}/kafka/topic/data/send/json
Content-Type: application/json

### soap工具 - 加载一个 webservice port
GET {{baseUrl}}/soap/ports?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl

### soap工具 - 查看某一个 port 的所有方法列表
GET {{baseUrl}}/soap/WeatherWebServiceSoap/methods?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl

### soap工具 - 获取某个方法入参
GET {{baseUrl}}/soap/WeatherWebServiceSoap/getWeatherbyCityName/input?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl

### soap 工具 - 获取某个方法出参
GET {{baseUrl}}/soap/WeatherWebServiceSoap/getWeatherbyCityName/output?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl

### soap 工具 - 构建 soap 参数
GET {{baseUrl}}/soap/WeatherWebServiceSoap/getWeatherbyCityName/build?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl

### soap 工具 - 发起查询
POST {{baseUrl}}/soap/WeatherWebServiceSoap/getWeatherbyCityName/request?wsdl=http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl
Content-Type: text/plain

<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <soap:Body xmlns="http://WebXml.com.cn/">
  <getWeatherbyCityName>
            <theCityName>深圳</theCityName>
        </getWeatherbyCityName>
    </soap:Body>
</soap:Envelope>

### dubbo - 获取所有的服务
GET {{baseUrl}}/dubbo/services?connName=192.168.2.134_2181

### dubbo - 获取所有提供者
GET {{baseUrl}}/dubbo/providers?connName=192.168.2.134_2181&serviceName=com.mmc.dubbo.api.user.UserService

### dubbo - 获取方法信息
GET {{baseUrl}}/dubbo/methods?connName=192.168.2.134_2181&serviceName=com.mmc.dubbo.api.user.UserService&methods=getCurrentById,insert&classloaderName=mmc-dubbo-api

### dubbo - 调用方法
POST {{baseUrl}}/dubbo/invoke
Content-Type: application/json

{
  "connName": "192.168.2.134_2181",
  "serviceName": "com.mmc.dubbo.api.user.UserService",
  "classloaderName": "mmc-dubbo-api",
  "methodInfo": {
    "name": "getCurrentById",
    "parameterTypeNames": ["long"]
  },
  "providerURL": "dubbo://192.168.2.101:30880/com.mmc.dubbo.api.user.UserService?anyhost=true&application=mmc-dubbo-provider&dubbo=2.6.2&generic=false&interface=com.mmc.dubbo.api.user.UserService&methods=getCurrentById,insert&pid=35288&side=provider&timestamp=1596275905147",
  "args": ["18"]
}

### mybatis - 上传 mapper 文件
POST {{baseUrl}}/mybatis/uploadMapperFile
Content-Type: multipart/form-data; boundary=uploadMapperFile

--uploadMapperFile
Content-Disposition: form-data; name="file"; filename="BatchMapper.xml"
Content-Type: application/octet-stream

< d:/test/ScheduleMapper.xml
--uploadMapperFile
Content-Disposition: form-data; name="project"
Content-Type: application/x-www-form-urlencoded

ir
--uploadMapperFile
Content-Disposition: form-data; name="classloaderName"
Content-Type: application/x-www-form-urlencoded

entity
### mybatis 的 mapper 文件不会在启动的时候加载, 需要手动 reload
GET {{baseUrl}}/mybatis/reload

### mybatis - 列出所有当前加载的项目
GET {{baseUrl}}/mybatis/projects

### mybatis 获取加载到的 sqlId
GET {{baseUrl}}/mybatis/statementIds?project=ir

### mybatis - 获取 sqlId 需要的参数
GET {{baseUrl}}/mybatis/statementParams?project=ir&statementId=com.eg.egsc.scp.informationrelease.mapper.ScheduleMapper.queryByCondition

### 执行获取绑定的 sql
POST {{baseUrl}}/mybatis/boundSql
Content-Type: application/json

{
  "project": "ir",
  "connName": "lo",
  "statementId": "com.eg.egsc.scp.informationrelease.mapper.ScheduleMapper.queryByCondition",
  "className": "java.util.HashMap",
  "arg": {
    "value": {
      "scheduleMode": "normal",
      "pageSize": 10,
      "start": 0,
      "isExamine": 0
    }
  }
}

###

